STRING | BOOLEANO 


Static Types
---------------------------------------------------------------

〈type〉::=〈functionType〉|〈typeNotFunction〉

x〈typeNotVoid〉::=〈functionType〉|〈typeNotVoidNotFunction〉

〈typeNotFunction〉::= void |〈typeNotVoidNotFunction〉

〈typeNotVoidNotFunction〉::=〈typeName〉〈typeArguments〉? |〈function〉

〈typeName〉::=〈typeIdentifier〉(‘.’〈typeIdentifier〉)

〈typedIdentifier〉::=〈type identifier〉

〈namedParameterType〉::=〈typedIdentifier〉

〈typeArguments〉::= ‘<’〈typeList〉‘>’

〈typeList〉::=〈type〉(‘,’〈type〉)* 

x〈typeNotVoidNotFunctionList〉::=〈typeNotVoidNotFunction〉(‘,’〈typeNotVoidNotFunction〉)* 

〈functionType〉::=〈functionTypeTails〉|〈typeNotFunction〉〈functionTypeTails〉

〈normalParameterType〉::=〈 typedIdentifier〉|〈type〉 

〈optionalParameterTypes ::=〈optionalPositionalParameterTypes〉|〈namedParameterTypes〉 

〈optionalPositionalParameterTypes〉::= ‘[’〈normalParameterTypes〉‘,’? ‘]’ 

〈namedParameterTypes〉::= ‘{’〈namedParameterType〉(‘,’〈namedParameterType〉)* ‘,’? ‘}’ 

〈namedParameterType〉::=〈typedIdentifier 〉

〈typedIdentifier〉::=〈type〉〈identifier〉 

x〈typeArguments〉::= ‘<’〈typeList〉 ‘>’

〈functionTypeTails〉::=〈functionTypeTail〉〈functionTypeTails〉|〈functionTypeTail〉 

x〈functionTypeTail〉::= Function〈typeParameters〉?〈parameterTypeList〉

x〈parameterTypeList〉::= ‘(’ ‘)’
     | ‘(’〈normalParameterTypes〉‘,’〈optionalParameterTypes〉‘)’
     | ‘(’〈 normalParameterTypes〉‘,’? ‘)’
     | ‘(’〈optionalParameterTypes〉‘)’

〈normalParameterTypes〉::=〈normalParameterType〉 (‘,’〈normalParameterType〉)*

〈normalParameterType〉::=〈typedIdentifier〉|〈type〉

〈optionalParameterTypes〉::=〈optionalPositionalParameterTypes〉|〈namedParameterTypes〉

〈optionalPositionalParameterTypes〉::= ‘[’〈normalParameterTypes〉‘,’? ‘]’

〈namedParameterTypes〉::= ‘{’〈namedParameterType 〉(‘,’〈namedParameterType〉)*‘,’? ‘}’

〈namedParameterType〉::=〈typedIdentifier〉

〈typedIdentifier〉::=〈type〉〈 identifier〉



Functions
--------------------------------------------------------------

〈functionBody〉::=〈block〉|〈block〉::= ‘{’〈statements〉‘}’

〈function〉::= Signature 〈block〉 

x〈formalParameterList〉::= ‘(’ ‘)’
     | ‘(’〈normalFormalParameters〉 ‘,’? ‘)’
     | ‘(’〈normalFormalParameters〉 ‘,’〈optionalOrNamedFormalParameters〉‘)’
     | ‘(’〈optionalOrNamedFormalParameters〉‘)’

x〈normalFormalParameters〉::= normalFormalParameter〉(‘,’〈 normalFormalParameter〉)*

x〈optionalOrNamedFormalParameters〉::= 〈optionalPositionalFormalParameters〉|〈namedFormalParameters〉

x〈optionalPositionalFormalParameters〉::= ‘[’〈defaultFormalParameter〉(‘,’〈defaultFormalParameter〉)* ‘,’? ‘]’

x〈namedFormalParameters〉::= ‘{’〈defaultNamedParameter〉(‘,’〈defaultNamedParameter〉)* ‘,’? ‘}’

x〈defaultFormalParameter〉::=〈normalFormalParameter〉(‘=’〈expression〉)? 

x〈defaultNamedParameter〉::=〈normalFormalParameter〉((‘=’ | ‘:’)〈expression〉)? 


〈topLevelDeclaration〉::=〈functionSignature〉〈functionBody〉|〈varOrType〉〈initializedIdentifierList〉 ‘;’


Expressions
----------------------------------------------------------------
〈expression〉::=〈assignableExpression〉〈assignmentOperator〉〈expression〉
     | 〈conditionalExpression〉
     | 〈cascade〉

〈expressionWithoutCascade〉::=〈assignableExpression〉〈assignmentOperator〉〈expressionWithoutCascade〉|〈conditionalExpression〉
     

〈primary〉::=〈functionExpression〉
     |〈literal〉
     |〈identifier〉
     |‘(’〈expression〉‘)’

〈literal〉::=〈nullLiteral〉
     | 〈booleanLiteral〉
     | 〈numericLiteral〉
     | 〈stringLiteral〉
     | 〈symbolLiteral〉


Statements
---------------------------------------------------------------

〈statements〉::=〈statement〉* 

〈statement〉::=〈label〉*〈nonLabelledStatement〉 

〈nonLabelledStatement〉::=〈block〉
     | 〈localVariableDeclaration〉
     | 〈forStatement〉
     | 〈whileStatement〉
     | 〈switchStatement〉
     | 〈ifStatement〉  
     | 〈breakStatement〉
     | 〈continueStatement〉
     | 〈returnStatement〉
     | 〈expressionStatement〉
     | 〈localFunctionDeclaration〉

〈localVariableDeclaration〉 ::= 〈metadata〉 〈initializedVariableDeclaration〉 ‘;’

〈forStatement〉::= await? for ‘(’〈forLoopParts〉‘)’〈statement〉

     〈forLoopParts〉::=〈forInitializerStatement〉〈expression〉? ‘;’〈expressionList〉?
          | 〈metadata〉〈declaredIdentifier〉in〈expression〉
          | 〈identifier〉 in 〈expression〉

     〈forInitializerStatement〉::=〈localVariableDeclaration〉|〈expression〉? ‘;’

〈whileStatement〉::= while ‘(’〈expression〉‘)’〈statement〉

〈switchStatement〉::= switch ‘(’〈expression〉‘)’ ‘{’〈switchCase〉*〈defaultCase〉? ‘}’

     〈switchCase〉::= 〈label〉* case 〈expression〉‘:’〈statements〉

     〈defaultCase〉::=〈label〉* default ‘:’〈statements〉

〈ifStatement〉::= if ‘(’〈expression〉‘)’ 〈statement〉(else〈statement〉)?

〈breakStatement〉::= break〈identifier〉? ‘;’

〈continueStatement〉::= continue〈identifier〉? ‘;’

〈returnStatement〉::= return〈expression〉? ‘;’

〈expressionStatement〉 ::=〈expression〉? ‘;’

〈localFunctionDeclaration〉::=〈metadata〉〈functionSignature〉〈functionBody〉
